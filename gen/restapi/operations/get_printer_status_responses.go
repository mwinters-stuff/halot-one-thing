// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mwinters-stuff/halo-one-thing/gen/models"
)

// GetPrinterStatusOKCode is the HTTP code returned for type GetPrinterStatusOK
const GetPrinterStatusOKCode int = 200

/*
GetPrinterStatusOK OK

swagger:response getPrinterStatusOK
*/
type GetPrinterStatusOK struct {

	/*
	  In: Body
	*/
	Payload *models.PrinterStatus `json:"body,omitempty"`
}

// NewGetPrinterStatusOK creates GetPrinterStatusOK with default headers values
func NewGetPrinterStatusOK() *GetPrinterStatusOK {

	return &GetPrinterStatusOK{}
}

// WithPayload adds the payload to the get printer status o k response
func (o *GetPrinterStatusOK) WithPayload(payload *models.PrinterStatus) *GetPrinterStatusOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get printer status o k response
func (o *GetPrinterStatusOK) SetPayload(payload *models.PrinterStatus) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrinterStatusOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetPrinterStatusConflictCode is the HTTP code returned for type GetPrinterStatusConflict
const GetPrinterStatusConflictCode int = 409

/*
GetPrinterStatusConflict Failed

swagger:response getPrinterStatusConflict
*/
type GetPrinterStatusConflict struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetPrinterStatusConflict creates GetPrinterStatusConflict with default headers values
func NewGetPrinterStatusConflict() *GetPrinterStatusConflict {

	return &GetPrinterStatusConflict{}
}

// WithPayload adds the payload to the get printer status conflict response
func (o *GetPrinterStatusConflict) WithPayload(payload *models.Error) *GetPrinterStatusConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get printer status conflict response
func (o *GetPrinterStatusConflict) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetPrinterStatusConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
